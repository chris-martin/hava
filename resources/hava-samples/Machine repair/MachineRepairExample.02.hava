// Tokens
token OPERATIONAL, CONTINUE, REPAIR, FAILED, GOOD, BAD;

// Parameters
pf = 1/3;  // Probability machine fails in a period
pe = 1/4;  // Probability of observation error in an inspection

g(machineState,action) = 
  if (action==REPAIR) {1} 
  else if (machineState==FAILED) {2} 
  else {0};

// Decision-maker's state
struct State(period, p:0.001);

p(state,action,observation) = 
  if (action==REPAIR) {p(State(state.period, 1), CONTINUE, observation)}
  else if (observation==GOOD) {(1-pe)*(1-pf)*state.p + pe*(1-(1-pf)*state.p)} 
  else {pe*(1-pf)*state.p + (1-pe)*(1-(1-pf)*state.p)};

nextState(state, action, observation) = 
  if (action==REPAIR) 
    {nextState(State(state.period, 1), CONTINUE, observation)}
  else if (observation==GOOD) 
    {State(state.period+1, (1-pe)*(1-pf)*state.p / p(state,action,observation))}
  else 
    {State(state.period+1, pe*(1-pf)*state.p / p(state,action,observation))};

// Dynamic programming
optAction(state) = argmin(action in (CONTINUE,REPAIR)) {v(state,action)};
v(state) = if (state.period < N) {v(state,optAction(state))} else {0};
v(state,action) = 
  g_(state,action) + 
  sum(observation in(GOOD,BAD)) 
    {p(state,action,observation)*v(nextState(state,action,observation))};

g_(state,action) = state.p*g(OPERATIONAL, action) + (1-state.p)*g(FAILED,action);

// Kick off
N = 3;
SOLUTION = v(State(0, 1));
